Les dejo este script, es una modificacion de un script que descargue y modifique de HOTSCRIPTS, permite que desde un solo archivo, se pueda administrar un sitio web, crear, subir, renombrar, descargar, y borrar directorios y archivos, editar archivos, cambiar de propiedades de lectura y escritura de archivos y directorios, uploading, etc, etc, completito.... esta configurado en español pero se puede cambiar a ingles.
Espero les sirva. Roberto.


&lt;?php 
function sinErrores ($errno, $errstr) { 
  echo '&lt;!-- Se produjo un error --&gt;'; 
} 
set_error_handler('sinErrores'); 

/* ------------------------------------------------------------------------- */

/* Your language:
 * 'en' - English
 * 'sp' - Spanish

 * 'auto' - autoselect
 */
$lang = 'sp';

/* Charset of output:
 * possible values are described in the charset table at
 * http://www.php.net/manual/en/function.htmlentities.php
 * 'auto' - use the same charset as the words of my language are encoded
 */
$site_charset = 'auto';

/* Homedir:
 * For example: './' - the script's directory
 */
$homedir = './';

/* Size of the edit textarea
 */
$editcols = 80;
$editrows = 25;

/* -------------------------------------------
 * Optional configuration (remove # to enable)
 */

/* Permission of created directories:
 * For example: 0705 would be 'drwx---r-x'.
 */
# $dirpermission = 0705;

/* Permission of created files:
 * For example: 0604 would be '-rw----r--'.
 */
# $filepermission = 0604;

/* Filenames related to the apache web server:
 */
$htaccess = '.htaccess';
$htpasswd = '.htpasswd';

/* ------------------------------------------------------------------------- */

if (get_magic_quotes_gpc()) {
	array_walk($_GET, 'strip');
	array_walk($_POST, 'strip');
	array_walk($_REQUEST, 'strip');
}

if (array_key_exists('image', $_GET)) {
	header('Content-Type: image/gif');
	die(getimage($_GET['image']));
}

if (!function_exists('lstat')) {
	function lstat ($filename) {
		return stat($filename);
	}
}

$delim = DIRECTORY_SEPARATOR;

if (function_exists('php_uname')) {
	$win = (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') ? true : false;
} else {
	$win = ($delim == '\\') ? true : false;
}

if (!empty($_SERVER['PATH_TRANSLATED'])) {
	$scriptdir = dirname($_SERVER['PATH_TRANSLATED']);
} elseif (!empty($_SERVER['SCRIPT_FILENAME'])) {
	$scriptdir = dirname($_SERVER['SCRIPT_FILENAME']);
} elseif (function_exists('getcwd')) {
	$scriptdir = getcwd();
} else {
	$scriptdir = '.';
}
$homedir = relative2absolute($homedir, $scriptdir);

$dir = (array_key_exists('dir', $_REQUEST)) ? $_REQUEST['dir'] : $homedir;

if (array_key_exists('olddir', $_POST) &amp;&amp; !path_is_relative($_POST['olddir'])) {
	$dir = relative2absolute($dir, $_POST['olddir']);
}

$directory = simplify_path(addslash($dir));

$files = array();
$action = '';
if (!empty($_POST['submit_all'])) {
	$action = $_POST['action_all'];
	for ($i = 0; $i &lt; $_POST['num']; $i++) {
		if (array_key_exists(&quot;checked$i&quot;, $_POST) &amp;&amp; $_POST[&quot;checked$i&quot;] == 'true') {
			$files[] = $_POST[&quot;file$i&quot;];
		}
	}
} elseif (!empty($_REQUEST['action'])) {
	$action = $_REQUEST['action'];
	$files[] = relative2absolute($_REQUEST['file'], $directory);
} elseif (!empty($_POST['submit_upload']) &amp;&amp; !empty($_FILES['upload']['name'])) {
	$files[] = $_FILES['upload'];
	$action = 'upload';
} elseif (array_key_exists('num', $_POST)) {
	for ($i = 0; $i &lt; $_POST['num']; $i++) {
		if (array_key_exists(&quot;submit$i&quot;, $_POST)) break;
	}
	if ($i &lt; $_POST['num']) {
		$action = $_POST[&quot;action$i&quot;];
		$files[] = $_POST[&quot;file$i&quot;];
	}
}
if (empty($action) &amp;&amp; (!empty($_POST['submit_create']) || (array_key_exists('focus', $_POST) &amp;&amp; $_POST['focus'] == 'create')) &amp;&amp; !empty($_POST['create_name'])) {
	$files[] = relative2absolute($_POST['create_name'], $directory);
	switch ($_POST['create_type']) {
	case 'directory':
		$action = 'create_directory';
		break;
	case 'file':
		$action = 'create_file';
	}
}
if (sizeof($files) == 0) $action = ''; else $file = reset($files);

if ($lang == 'auto') {
	if (array_key_exists('HTTP_ACCEPT_LANGUAGE', $_SERVER) &amp;&amp; strlen($_SERVER['HTTP_ACCEPT_LANGUAGE']) &gt;= 2) {
		$lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2);
	} else {
		$lang = 'en';
	}
}

$words = getwords($lang);

if ($site_charset == 'auto') {
	$site_charset = $word_charset;
}

$cols = ($win) ? 4 : 7;

if (!isset($dirpermission)) {
	$dirpermission = (function_exists('umask')) ? (0777 &amp; ~umask()) : 0755;
}
if (!isset($filepermission)) {
	$filepermission = (function_exists('umask')) ? (0666 &amp; ~umask()) : 0644;
}

if (!empty($_SERVER['SCRIPT_NAME'])) {
	$self = html(basename($_SERVER['SCRIPT_NAME']));
} elseif (!empty($_SERVER['PHP_SELF'])) {
	$self = html(basename($_SERVER['PHP_SELF']));
} else {
	$self = '';
}

if (!empty($_SERVER['SERVER_SOFTWARE'])) {
	if (strtolower(substr($_SERVER['SERVER_SOFTWARE'], 0, 6)) == 'apache') {
		$apache = true;
	} else {
		$apache = false;
	}
} else {
	$apache = true;
}

switch ($action) {

case 'view':

	if (is_script($file)) {

		/* highlight_file is a mess! */
		ob_start();
		highlight_file($file);
		$src = ereg_replace('&lt;font color=&quot;([^&quot;]*)&quot;&gt;', '&lt;span style=&quot;color: \1&quot;&gt;', ob_get_contents());
		$src = str_replace(array('&lt;/font&gt;', &quot;\r&quot;, &quot;\n&quot;), array('&lt;/span&gt;', '', ''), $src);
		ob_end_clean();

		html_header();
		echo '&lt;h2 style=&quot;text-align: left; margin-bottom: 0&quot;&gt;' . html($file) . '&lt;/h2&gt;

&lt;hr /&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: right; vertical-align: top; color: gray; padding-right: 3pt; border-right: 1px solid gray&quot;&gt;
&lt;pre style=&quot;margin-top: 0&quot;&gt;&lt;code&gt;';

		for ($i = 1; $i &lt;= sizeof(file($file)); $i++) echo &quot;$i\n&quot;;

		echo '&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: left; vertical-align: top; padding-left: 3pt&quot;&gt;
&lt;pre style=&quot;margin-top: 0&quot;&gt;' . $src . '&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

';

		html_footer();

	} else {

		header('Content-Type: ' . getmimetype($file));
		header('Content-Disposition: filename=' . basename($file));

		readfile($file);

	}

	break;

case 'download':

	header('Pragma: public');
	header('Expires: 0');
	header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
	header('Content-Type: ' . getmimetype($file));
	header('Content-Disposition: attachment; filename=' . basename($file) . ';');
	header('Content-Length: ' . filesize($file));

	readfile($file);

	break;

case 'upload':

	$dest = relative2absolute($file['name'], $directory);

	if (@file_exists($dest)) {
		listing_page(error('already_exists', $dest));
	} elseif (@move_uploaded_file($file['tmp_name'], $dest)) {
		@chmod($dest, $filepermission);
		listing_page(notice('uploaded', $file['name']));
	} else {
		listing_page(error('not_uploaded', $file['name']));
	}

	break;

case 'create_directory':

	if (@file_exists($file)) {
		listing_page(error('already_exists', $file));
	} else {
		$old = @umask(0777 &amp; ~$dirpermission);
		if (@mkdir($file, $dirpermission)) {
			listing_page(notice('created', $file));
		} else {
			listing_page(error('not_created', $file));
		}
		@umask($old);
	}

	break;

case 'create_file':

	if (@file_exists($file)) {
		listing_page(error('already_exists', $file));
	} else {
		$old = @umask(0777 &amp; ~$filepermission);
		if (@touch($file)) {
			edit($file);
		} else {
			listing_page(error('not_created', $file));
		}
		@umask($old);
	}

	break;

case 'execute':

	chdir(dirname($file));

	$output = array();
	$retval = 0;
	exec('echo &quot;./' . basename($file) . '&quot; | /bin/sh', $output, $retval);

	$error = ($retval == 0) ? false : true;

	if (sizeof($output) == 0) $output = array('&lt;' . $words['no_output'] . '&gt;');

	if ($error) {
		listing_page(error('not_executed', $file, implode(&quot;\n&quot;, $output)));
	} else {
		listing_page(notice('executed', $file, implode(&quot;\n&quot;, $output)));
	}

	break;

case 'delete':

	if (!empty($_POST['no'])) {
		listing_page();
	} elseif (!empty($_POST['yes'])) {

		$failure = array();
		$success = array();

		foreach ($files as $file) {
			if (del($file)) {
				$success[] = $file;
			} else {
				$failure[] = $file;
			}
		}

		$message = '';
		if (sizeof($failure) &gt; 0) {
			$message = error('not_deleted', implode(&quot;\n&quot;, $failure));
		}
		if (sizeof($success) &gt; 0) {
			$message .= notice('deleted', implode(&quot;\n&quot;, $success));
		}

		listing_page($message);

	} else {

		html_header();

		echo '&lt;form action=&quot;' . $self . '&quot; method=&quot;post&quot;&gt;
&lt;table class=&quot;dialog&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;dialog&quot;&gt;
';

		request_dump();

		echo &quot;\t&lt;b&gt;&quot; . word('really_delete') . '&lt;/b&gt;
	&lt;p&gt;
';

		foreach ($files as $file) {
			echo &quot;\t&quot; . html($file) . &quot;&lt;br /&gt;\n&quot;;
		}

		echo '	&lt;/p&gt;
	&lt;hr /&gt;
	&lt;input type=&quot;submit&quot; name=&quot;no&quot; value=&quot;' . word('no') . '&quot; id=&quot;red_button&quot; /&gt;
	&lt;input type=&quot;submit&quot; name=&quot;yes&quot; value=&quot;' . word('yes') . '&quot; id=&quot;green_button&quot; style=&quot;margin-left: 50px&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/form&gt;

';

		html_footer();

	}

	break;

case 'rename':

	if (!empty($_POST['destination'])) {

		$dest = relative2absolute($_POST['destination'], $directory);

		if (!@file_exists($dest) &amp;&amp; @rename($file, $dest)) {
			listing_page(notice('renamed', $file, $dest));
		} else {
			listing_page(error('not_renamed', $file, $dest));
		}

	} else {

		$name = basename($file);

		html_header();

		echo '&lt;form action=&quot;' . $self . '&quot; method=&quot;post&quot;&gt;

&lt;table class=&quot;dialog&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;dialog&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;rename&quot; /&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;file&quot; value=&quot;' . html($file) . '&quot; /&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;dir&quot; value=&quot;' . html($directory) . '&quot; /&gt;
	&lt;b&gt;' . word('rename_file') . '&lt;/b&gt;
	&lt;p&gt;' . html($file) . '&lt;/p&gt;
	&lt;b&gt;' . substr($file, 0, strlen($file) - strlen($name)) . '&lt;/b&gt;
	&lt;input type=&quot;text&quot; name=&quot;destination&quot; size=&quot;' . textfieldsize($name) . '&quot; value=&quot;' . html($name) . '&quot; /&gt;
	&lt;hr /&gt;
	&lt;input type=&quot;submit&quot; value=&quot;' . word('rename') . '&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;' . $self . '?dir=' . urlencode($directory) . '&quot;&gt;[ ' . word('back') . ' ]&lt;/a&gt;&lt;/p&gt;

&lt;/form&gt;

';

		html_footer();

	}

	break;

case 'move':

	if (!empty($_POST['destination'])) {

		$dest = relative2absolute($_POST['destination'], $directory);

		$failure = array();
		$success = array();

		foreach ($files as $file) {
			$filename = substr($file, strlen($directory));
			$d = $dest . $filename;
			if (!@file_exists($d) &amp;&amp; @rename($file, $d)) {
				$success[] = $file;
			} else {
				$failure[] = $file;
			}
		}

		$message = '';
		if (sizeof($failure) &gt; 0) {
			$message = error('not_moved', implode(&quot;\n&quot;, $failure), $dest);
		}
		if (sizeof($success) &gt; 0) {
			$message .= notice('moved', implode(&quot;\n&quot;, $success), $dest);
		}

		listing_page($message);

	} else {

		html_header();

		echo '&lt;form action=&quot;' . $self . '&quot; method=&quot;post&quot;&gt;

&lt;table class=&quot;dialog&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;dialog&quot;&gt;
';

		request_dump();

		echo &quot;\t&lt;b&gt;&quot; . word('move_files') . '&lt;/b&gt;
	&lt;p&gt;
';

		foreach ($files as $file) {
			echo &quot;\t&quot; . html($file) . &quot;&lt;br /&gt;\n&quot;;
		}

		echo '	&lt;/p&gt;
	&lt;hr /&gt;
	' . word('destination') . ':
	&lt;input type=&quot;text&quot; name=&quot;destination&quot; size=&quot;' . textfieldsize($directory) . '&quot; value=&quot;' . html($directory) . '&quot; /&gt;
	&lt;input type=&quot;submit&quot; value=&quot;' . word('move') . '&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;' . $self . '?dir=' . urlencode($directory) . '&quot;&gt;[ ' . word('back') . ' ]&lt;/a&gt;&lt;/p&gt;

&lt;/form&gt;

';

		html_footer();

	}

	break;

case 'copy':

	if (!empty($_POST['destination'])) {

		$dest = relative2absolute($_POST['destination'], $directory);

		if (@is_dir($dest)) {

			$failure = array();
			$success = array();

			foreach ($files as $file) {
				$filename = substr($file, strlen($directory));
				$d = addslash($dest) . $filename;
				if (!@is_dir($file) &amp;&amp; !@file_exists($d) &amp;&amp; @copy($file, $d)) {
					$success[] = $file;
				} else {
					$failure[] = $file;
				}
			}

			$message = '';
			if (sizeof($failure) &gt; 0) {
				$message = error('not_copied', implode(&quot;\n&quot;, $failure), $dest);
			}
			if (sizeof($success) &gt; 0) {
				$message .= notice('copied', implode(&quot;\n&quot;, $success), $dest);
			}

			listing_page($message);

		} else {

			if (!@file_exists($dest) &amp;&amp; @copy($file, $dest)) {
				listing_page(notice('copied', $file, $dest));
			} else {
				listing_page(error('not_copied', $file, $dest));
			}

		}

	} else {

		html_header();

		echo '&lt;form action=&quot;' . $self . '&quot; method=&quot;post&quot;&gt;

&lt;table class=&quot;dialog&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;dialog&quot;&gt;
';

		request_dump();

		echo &quot;\n&lt;b&gt;&quot; . word('copy_files') . '&lt;/b&gt;
	&lt;p&gt;
';

		foreach ($files as $file) {
			echo &quot;\t&quot; . html($file) . &quot;&lt;br /&gt;\n&quot;;
		}

		echo '	&lt;/p&gt;
	&lt;hr /&gt;
	' . word('destination') . ':
	&lt;input type=&quot;text&quot; name=&quot;destination&quot; size=&quot;' . textfieldsize($directory) . '&quot; value=&quot;' . html($directory) . '&quot; /&gt;
	&lt;input type=&quot;submit&quot; value=&quot;' . word('copy') . '&quot; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;' . $self . '?dir=' . urlencode($directory) . '&quot;&gt;[ ' . word('back') . ' ]&lt;/a&gt;&lt;/p&gt;

&lt;/form&gt;

';

		html_footer();

	}

	break;

case 'create_symlink':

	if (!empty($_POST['destination'])) {

		$dest = relative2absolute($_POST['destination'], $directory);

		if (substr($dest, -1, 1) == $delim) $dest .= basename($file);

		if (!empty($_POST['relative'])) $file = absolute2relative(addslash(dirname($dest)), $file);

		if (!@file_exists($dest) &amp;&amp; @symlink($file, $dest)) {
			listing_page(notice('symlinked', $file, $dest));
		} else {
			listing_page(error('not_symlinked', $file, $dest));
		}

	} else {

		html_header();

		echo '&lt;form action=&quot;' . $self . '&quot; method=&quot;post&quot;&gt;

&lt;table class=&quot;dialog&quot; id=&quot;symlink&quot;&gt;
&lt;tr&gt;
	&lt;td style=&quot;vertical-align: top&quot;&gt;' . word('destination') . ': &lt;/td&gt;
	&lt;td&gt;
		&lt;b&gt;' . html($file) . '&lt;/b&gt;&lt;br /&gt;
		&lt;input type=&quot;checkbox&quot; name=&quot;relative&quot; value=&quot;yes&quot; id=&quot;checkbox_relative&quot; checked=&quot;checked&quot; style=&quot;margin-top: 1ex&quot; /&gt;
		&lt;label for=&quot;checkbox_relative&quot;&gt;' . word('relative') . '&lt;/label&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;create_symlink&quot; /&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;file&quot; value=&quot;' . html($file) . '&quot; /&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;dir&quot; value=&quot;' . html($directory) . '&quot; /&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;' . word('symlink') . ': &lt;/td&gt;
	&lt;td&gt;
		&lt;input type=&quot;text&quot; name=&quot;destination&quot; size=&quot;' . textfieldsize($directory) . '&quot; value=&quot;' . html($directory) . '&quot; /&gt;
		&lt;input type=&quot;submit&quot; value=&quot;' . word('create_symlink') . '&quot; /&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;' . $self . '?dir=' . urlencode($directory) . '&quot;&gt;[ ' . word('back') . ' ]&lt;/a&gt;&lt;/p&gt;

&lt;/form&gt;

';

		html_footer();

	}

	break;

case 'edit':

	if (!empty($_POST['save'])) {

		$content = str_replace(&quot;\r\n&quot;, &quot;\n&quot;, $_POST['content']);

		if (($f = @fopen($file, 'w')) &amp;&amp; @fwrite($f, $content) !== false &amp;&amp; @fclose($f)) {
			listing_page(notice('saved', $file));
		} else {
			listing_page(error('not_saved', $file));
		}

	} else {

		if (@is_readable($file) &amp;&amp; @is_writable($file)) {
			edit($file);
		} else {
			listing_page(error('not_edited', $file));
		}

	}

	break;

case 'permission':

	if (!empty($_POST['set'])) {

		$mode = 0;
		if (!empty($_POST['ur'])) $mode |= 0400; if (!empty($_POST['uw'])) $mode |= 0200; if (!empty($_POST['ux'])) $mode |= 0100;
		if (!empty($_POST['gr'])) $mode |= 0040; if (!empty($_POST['gw'])) $mode |= 0020; if (!empty($_POST['gx'])) $mode |= 0010;
		if (!empty($_POST['or'])) $mode |= 0004; if (!empty($_POST['ow'])) $mode |= 0002; if (!empty($_POST['ox'])) $mode |= 0001;

		if (@chmod($file, $mode)) {
			listing_page(notice('permission_set', $file, decoct($mode)));
		} else {
			listing_page(error('permission_not_set', $file, decoct($mode)));
		}

	} else {

		html_header();

		$mode = fileperms($file);

		echo '&lt;form action=&quot;' . $self . '&quot; method=&quot;post&quot;&gt;

&lt;table class=&quot;dialog&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;dialog&quot;&gt;

	&lt;p style=&quot;margin: 0&quot;&gt;' . phrase('permission_for', $file) . '&lt;/p&gt;

	&lt;hr /&gt;

	&lt;table id=&quot;permission&quot;&gt;
	&lt;tr&gt;
		&lt;td&gt;&lt;/td&gt;
		&lt;td style=&quot;border-right: 1px solid black&quot;&gt;' . word('owner') . '&lt;/td&gt;
		&lt;td style=&quot;border-right: 1px solid black&quot;&gt;' . word('group') . '&lt;/td&gt;
		&lt;td&gt;' . word('other') . '&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td style=&quot;text-align: right&quot;&gt;' . word('read') . ':&lt;/td&gt;
		&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;ur&quot; value=&quot;1&quot;'; if ($mode &amp; 00400) echo ' checked=&quot;checked&quot;'; echo ' /&gt;&lt;/td&gt;
		&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;gr&quot; value=&quot;1&quot;'; if ($mode &amp; 00040) echo ' checked=&quot;checked&quot;'; echo ' /&gt;&lt;/td&gt;
		&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;or&quot; value=&quot;1&quot;'; if ($mode &amp; 00004) echo ' checked=&quot;checked&quot;'; echo ' /&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td style=&quot;text-align: right&quot;&gt;' . word('write') . ':&lt;/td&gt;
		&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;uw&quot; value=&quot;1&quot;'; if ($mode &amp; 00200) echo ' checked=&quot;checked&quot;'; echo ' /&gt;&lt;/td&gt;
		&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;gw&quot; value=&quot;1&quot;'; if ($mode &amp; 00020) echo ' checked=&quot;checked&quot;'; echo ' /&gt;&lt;/td&gt;
		&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;ow&quot; value=&quot;1&quot;'; if ($mode &amp; 00002) echo ' checked=&quot;checked&quot;'; echo ' /&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td style=&quot;text-align: right&quot;&gt;' . word('execute') . ':&lt;/td&gt;
		&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;ux&quot; value=&quot;1&quot;'; if ($mode &amp; 00100) echo ' checked=&quot;checked&quot;'; echo ' /&gt;&lt;/td&gt;
		&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;gx&quot; value=&quot;1&quot;'; if ($mode &amp; 00010) echo ' checked=&quot;checked&quot;'; echo ' /&gt;&lt;/td&gt;
		&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;ox&quot; value=&quot;1&quot;'; if ($mode &amp; 00001) echo ' checked=&quot;checked&quot;'; echo ' /&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;/table&gt;

	&lt;hr /&gt;

	&lt;input type=&quot;submit&quot; name=&quot;set&quot; value=&quot;' . word('set') . '&quot; /&gt;

	&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;permission&quot; /&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;file&quot; value=&quot;' . html($file) . '&quot; /&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;dir&quot; value=&quot;' . html($directory) . '&quot; /&gt;

&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;' . $self . '?dir=' . urlencode($directory) . '&quot;&gt;[ ' . word('back') . ' ]&lt;/a&gt;&lt;/p&gt;

&lt;/form&gt;

';

		html_footer();

	}

	break;

default:

	listing_page();

}

/* ------------------------------------------------------------------------- */

function getlist ($directory) {
	global $delim, $win;

	if ($d = @opendir($directory)) {

		while (($filename = @readdir($d)) !== false) {

			$path = $directory . $filename;

			if ($stat = @lstat($path)) {

				$file = array(
					'filename'    =&gt; $filename,
					'path'        =&gt; $path,
					'is_file'     =&gt; @is_file($path),
					'is_dir'      =&gt; @is_dir($path),
					'is_link'     =&gt; @is_link($path),
					'is_readable' =&gt; @is_readable($path),
					'is_writable' =&gt; @is_writable($path),
					'size'        =&gt; $stat['size'],
					'permission'  =&gt; $stat['mode'],
					'owner'       =&gt; $stat['uid'],
					'group'       =&gt; $stat['gid'],
					'mtime'       =&gt; @filemtime($path),
					'atime'       =&gt; @fileatime($path),
					'ctime'       =&gt; @filectime($path)
				);

				if ($file['is_dir']) {
					$file['is_executable'] = @file_exists($path . $delim . '.');
				} else {
					if (!$win) {
						$file['is_executable'] = @is_executable($path);
					} else {
						$file['is_executable'] = true;
					}
				}

				if ($file['is_link']) $file['target'] = @readlink($path);

				if (function_exists('posix_getpwuid')) $file['owner_name'] = @reset(posix_getpwuid($file['owner']));
				if (function_exists('posix_getgrgid')) $file['group_name'] = @reset(posix_getgrgid($file['group']));

				$files[] = $file;

			}

		}

		return $files;

	} else {
		return false;
	}

}

function sortlist (&amp;$list, $key, $reverse) {

	quicksort($list, 0, sizeof($list) - 1, $key);

	if ($reverse) $list = array_reverse($list);

}

function quicksort (&amp;$array, $first, $last, $key) {

	if ($first &lt; $last) {

		$cmp = $array[floor(($first + $last) / 2)][$key];

		$l = $first;
		$r = $last;

		while ($l &lt;= $r) {

			while ($array[$l][$key] &lt; $cmp) $l++;
			while ($array[$r][$key] &gt; $cmp) $r--;

			if ($l &lt;= $r) {

				$tmp = $array[$l];
				$array[$l] = $array[$r];
				$array[$r] = $tmp;

				$l++;
				$r--;

			}

		}

		quicksort($array, $first, $r, $key);
		quicksort($array, $l, $last, $key);

	}

}

function permission_octal2string ($mode) {

	if (($mode &amp; 0xC000) === 0xC000) {
		$type = 's';
	} elseif (($mode &amp; 0xA000) === 0xA000) {
		$type = 'l';
	} elseif (($mode &amp; 0x8000) === 0x8000) {
		$type = '-';
	} elseif (($mode &amp; 0x6000) === 0x6000) {
		$type = 'b';
	} elseif (($mode &amp; 0x4000) === 0x4000) {
		$type = 'd';
	} elseif (($mode &amp; 0x2000) === 0x2000) {
		$type = 'c';
	} elseif (($mode &amp; 0x1000) === 0x1000) {
		$type = 'p';
	} else {
		$type = '?';
	}

	$owner  = ($mode &amp; 00400) ? 'r' : '-';
	$owner .= ($mode &amp; 00200) ? 'w' : '-';
	if ($mode &amp; 0x800) {
		$owner .= ($mode &amp; 00100) ? 's' : 'S';
	} else {
		$owner .= ($mode &amp; 00100) ? 'x' : '-';
	}

	$group  = ($mode &amp; 00040) ? 'r' : '-';
	$group .= ($mode &amp; 00020) ? 'w' : '-';
	if ($mode &amp; 0x400) {
		$group .= ($mode &amp; 00010) ? 's' : 'S';
	} else {
		$group .= ($mode &amp; 00010) ? 'x' : '-';
	}

	$other  = ($mode &amp; 00004) ? 'r' : '-';
	$other .= ($mode &amp; 00002) ? 'w' : '-';
	if ($mode &amp; 0x200) {
		$other .= ($mode &amp; 00001) ? 't' : 'T';
	} else {
		$other .= ($mode &amp; 00001) ? 'x' : '-';
	}

	return $type . $owner . $group . $other;

}

function is_script ($filename) {
	return ereg('\.php$|\.php3$|\.php4$|\.php5$', $filename);
}

function getmimetype ($filename) {
	static $mimes = array(
		'\.jpg$|\.jpeg$'  =&gt; 'image/jpeg',
		'\.gif$'          =&gt; 'image/gif',
		'\.png$'          =&gt; 'image/png',
		'\.html$|\.html$' =&gt; 'text/html',
		'\.txt$|\.asc$'   =&gt; 'text/plain',
		'\.xml$|\.xsl$'   =&gt; 'application/xml',
		'\.pdf$'          =&gt; 'application/pdf'
	);

	foreach ($mimes as $regex =&gt; $mime) {
		if (eregi($regex, $filename)) return $mime;
	}

	// return 'application/octet-stream';
	return 'text/plain';

}

function del ($file) {
	global $delim;

	if (!@is_link($file) &amp;&amp; !file_exists($file)) return false;

	if (!@is_link($file) &amp;&amp; @is_dir($file)) {

		if ($dir = @opendir($file)) {

			$error = false;

			while (($f = readdir($dir)) !== false) {
				if ($f != '.' &amp;&amp; $f != '..' &amp;&amp; !del($file . $delim . $f)) {
					$error = true;
				}
			}
			closedir($dir);

			if (!$error) return @rmdir($file);

			return !$error;

		} else {
			return false;
		}

	} else {
		return @unlink($file);
	}

}

function addslash ($directory) {
	global $delim;

	if (substr($directory, -1, 1) != $delim) {
		return $directory . $delim;
	} else {
		return $directory;
	}

}

function relative2absolute ($string, $directory) {

	if (path_is_relative($string)) {
		return simplify_path(addslash($directory) . $string);
	} else {
		return simplify_path($string);
	}

}

function path_is_relative ($path) {
	global $win;

	if ($win) {
		return (substr($path, 1, 1) != ':');
	} else {
		return (substr($path, 0, 1) != '/');
	}

}

function absolute2relative ($directory, $target) {
	global $delim;

	$path = '';
	while ($directory != $target) {
		if ($directory == substr($target, 0, strlen($directory))) {
			$path .= substr($target, strlen($directory));
			break;
		} else {
			$path .= '..' . $delim;
			$directory = substr($directory, 0, strrpos(substr($directory, 0, -1), $delim) + 1);
		}
	}
	if ($path == '') $path = '.';

	return $path;

}

function simplify_path ($path) {
	global $delim;

	if (@file_exists($path) &amp;&amp; function_exists('realpath') &amp;&amp; @realpath($path) != '') {
		$path = realpath($path);
		if (@is_dir($path)) {
			return addslash($path);
		} else {
			return $path;
		}
	}

	$pattern  = $delim . '.' . $delim;

	if (@is_dir($path)) {
		$path = addslash($path);
	}

	while (strpos($path, $pattern) !== false) {
		$path = str_replace($pattern, $delim, $path);
	}

	$e = addslashes($delim);
	$regex = $e . '((\.[^\.' . $e . '][^' . $e . ']*)|(\.\.[^' . $e . ']+)|([^\.][^' . $e . ']*))' . $e . '\.\.' . $e;

	while (ereg($regex, $path)) {
		$path = ereg_replace($regex, $delim, $path);
	}
	
	return $path;

}

function human_filesize ($filesize) {

	$suffices = 'kMGTPE';

	$n = 0;
	while ($filesize &gt;= 1000) {
		$filesize /= 1024;
		$n++;
	}

	$filesize = round($filesize, 3 - strpos($filesize, '.'));

	if (strpos($filesize, '.') !== false) {
		while (in_array(substr($filesize, -1, 1), array('0', '.'))) {
			$filesize = substr($filesize, 0, strlen($filesize) - 1);
		}
	}

	$suffix = (($n == 0) ? '' : substr($suffices, $n - 1, 1));

	return $filesize . &quot; {$suffix}B&quot;;

}

function strip (&amp;$str) {
	$str = stripslashes($str);
}

/* ------------------------------------------------------------------------- */

function listing_page ($message = null) {
	global $self, $directory, $sort, $reverse;

	html_header();

	$list = getlist($directory);

	if (array_key_exists('sort', $_GET)) $sort = $_GET['sort']; else $sort = 'filename';
	if (array_key_exists('reverse', $_GET) &amp;&amp; $_GET['reverse'] == 'true') $reverse = true; else $reverse = false;

	sortlist($list, $sort, $reverse);

	echo '&lt;h1 style=&quot;margin-bottom: 0&quot;&gt;webadmin.php&lt;/h1&gt;

&lt;form enctype=&quot;multipart/form-data&quot; action=&quot;' . $self . '&quot; method=&quot;post&quot;&gt;

&lt;table id=&quot;main&quot;&gt;
';

	directory_choice();

	if (!empty($message)) {
		spacer();
		echo $message;
	}

	if (@is_writable($directory)) {
		upload_box();
		create_box();
	} else {
		spacer();
	}

	if ($list) {
		listing($list);
	} else {
		echo error('not_readable', $directory);
	}

	echo '&lt;/table&gt;

&lt;/form&gt;

';

	html_footer();

}

function listing ($list) {
	global $directory, $homedir, $sort, $reverse, $win, $cols, $date_format, $self;

	echo '&lt;tr class=&quot;listing&quot;&gt;
	&lt;th style=&quot;text-align: center; vertical-align: middle&quot;&gt;&lt;/th&gt;
';

	$d = 'dir=' . urlencode($directory) . '&amp;amp;';

	if (!$reverse &amp;&amp; $sort == 'filename') $r = '&amp;amp;reverse=true'; else $r = '';
	echo &quot;\t&lt;th class=\&quot;filename\&quot;&gt;&lt;a href=\&quot;$self?{$d}sort=filename$r\&quot;&gt;&quot; . word('filename') . &quot;&lt;/a&gt;&lt;/th&gt;\n&quot;;

	if (!$reverse &amp;&amp; $sort == 'size') $r = '&amp;amp;reverse=true'; else $r = '';
	echo &quot;\t&lt;th class=\&quot;size\&quot;&gt;&lt;a href=\&quot;$self?{$d}sort=size$r\&quot;&gt;&quot; . word('size') . &quot;&lt;/a&gt;&lt;/th&gt;\n&quot;;

	if (!$win) {

		if (!$reverse &amp;&amp; $sort == 'permission') $r = '&amp;amp;reverse=true'; else $r = '';
		echo &quot;\t&lt;th class=\&quot;permission_header\&quot;&gt;&lt;a href=\&quot;$self?{$d}sort=permission$r\&quot;&gt;&quot; . word('permission') . &quot;&lt;/a&gt;&lt;/th&gt;\n&quot;;

		if (!$reverse &amp;&amp; $sort == 'owner') $r = '&amp;amp;reverse=true'; else $r = '';
		echo &quot;\t&lt;th class=\&quot;owner\&quot;&gt;&lt;a href=\&quot;$self?{$d}sort=owner$r\&quot;&gt;&quot; . word('owner') . &quot;&lt;/a&gt;&lt;/th&gt;\n&quot;;

		if (!$reverse &amp;&amp; $sort == 'group') $r = '&amp;amp;reverse=true'; else $r = '';
		echo &quot;\t&lt;th class=\&quot;group\&quot;&gt;&lt;a href=\&quot;$self?{$d}sort=group$r\&quot;&gt;&quot; . word('group') . &quot;&lt;/a&gt;&lt;/th&gt;\n&quot;;

	}

	echo '	&lt;th class=&quot;functions&quot;&gt;' . word('functions') . '&lt;/th&gt;
&lt;/tr&gt;
';

	for ($i = 0; $i &lt; sizeof($list); $i++) {
		$file = $list[$i];

		$timestamps  = 'mtime: ' . date($date_format, $file['mtime']) . ', ';
		$timestamps .= 'atime: ' . date($date_format, $file['atime']) . ', ';
		$timestamps .= 'ctime: ' . date($date_format, $file['ctime']);

		echo '&lt;tr class=&quot;listing&quot;&gt;
	&lt;td class=&quot;checkbox&quot;&gt;&lt;input type=&quot;checkbox&quot; name=&quot;checked' . $i . '&quot; value=&quot;true&quot; onfocus=&quot;activate(\'other\')&quot; /&gt;&lt;/td&gt;
	&lt;td class=&quot;filename&quot; title=&quot;' . html($timestamps) . '&quot;&gt;';

		if ($file['is_link']) {

			echo '&lt;img src=&quot;' . $self . '?image=link&quot; alt=&quot;link&quot; /&gt; ';
			echo html($file['filename']) . ' &amp;rarr; ';

			$real_file = relative2absolute($file['target'], $directory);

			if (@is_readable($real_file)) {
				if (@is_dir($real_file)) {
					echo '[ &lt;a href=&quot;' . $self . '?dir=' . urlencode($real_file) . '&quot;&gt;' . html($file['target']) . '&lt;/a&gt; ]';
				} else {
					echo '&lt;a href=&quot;' . $self . '?action=view&amp;amp;file=' . urlencode($real_file) . '&quot;&gt;' . html($file['target']) . '&lt;/a&gt;';
				}
			} else {
				echo html($file['target']);
			}

		} elseif ($file['is_dir']) {

			echo '&lt;img src=&quot;' . $self . '?image=folder&quot; alt=&quot;folder&quot; /&gt; [ ';
			if ($win || $file['is_executable']) {
				echo '&lt;a href=&quot;' . $self . '?dir=' . urlencode($file['path']) . '&quot;&gt;' . html($file['filename']) . '&lt;/a&gt;';
			} else {
				echo html($file['filename']);
			}
			echo ' ]';

		} else {

			if (substr($file['filename'], 0, 1) == '.') {
				echo '&lt;img src=&quot;' . $self . '?image=hidden_file&quot; alt=&quot;hidden file&quot; /&gt; ';
			} else {
				echo '&lt;img src=&quot;' . $self . '?image=file&quot; alt=&quot;file&quot; /&gt; ';
			}

			if ($file['is_file'] &amp;&amp; $file['is_readable']) {
			   echo '&lt;a href=&quot;' . $self . '?action=view&amp;amp;file=' . urlencode($file['path']) . '&quot;&gt;' . html($file['filename']) . '&lt;/a&gt;';
			} else {
				echo html($file['filename']);
			}

		}

		if ($file['size'] &gt;= 1000) {
			$human = ' title=&quot;' . human_filesize($file['size']) . '&quot;';
		} else {
			$human = '';
		}

		echo &quot;\t&lt;td class=\&quot;size\&quot;$human&gt;{$file['size']} B&lt;/td&gt;\n&quot;;

		if (!$win) {

			echo &quot;\t&lt;td class=\&quot;permission\&quot; title=\&quot;&quot; . decoct($file['permission']) . '&quot;&gt;';

			$l = !$file['is_link'] &amp;&amp; (!function_exists('posix_getuid') || $file['owner'] == posix_getuid());
			if ($l) echo '&lt;a href=&quot;' . $self . '?action=permission&amp;amp;file=' . urlencode($file['path']) . '&amp;amp;dir=' . urlencode($directory) . '&quot;&gt;';
			echo html(permission_octal2string($file['permission']));
			if ($l) echo '&lt;/a&gt;';

			echo &quot;&lt;/td&gt;\n&quot;;

			if (array_key_exists('owner_name', $file)) {
				echo &quot;\t&lt;td class=\&quot;owner\&quot; title=\&quot;uid: {$file['owner']}\&quot;&gt;{$file['owner_name']}&lt;/td&gt;\n&quot;;
			} else {
				echo &quot;\t&lt;td class=\&quot;owner\&quot;&gt;{$file['owner']}&lt;/td&gt;\n&quot;;
			}

			if (array_key_exists('group_name', $file)) {
				echo &quot;\t&lt;td class=\&quot;group\&quot; title=\&quot;gid: {$file['group']}\&quot;&gt;{$file['group_name']}&lt;/td&gt;\n&quot;;
			} else {
				echo &quot;\t&lt;td class=\&quot;group\&quot;&gt;{$file['group']}&lt;/td&gt;\n&quot;;
			}

		}

		echo '	&lt;td class=&quot;functions&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;file' . $i . '&quot; value=&quot;' . html($file['path']) . '&quot; /&gt;
';

		$actions = array();
		if (function_exists('symlink')) {
			$actions[] = 'create_symlink';
		}
		if (@is_writable(dirname($file['path']))) {
			$actions[] = 'delete';
			$actions[] = 'rename';
			$actions[] = 'move';
		}
		if ($file['is_file'] &amp;&amp; $file['is_readable']) {
			$actions[] = 'copy';
			$actions[] = 'download';
			if ($file['is_writable']) $actions[] = 'edit';
		}
		if (!$win &amp;&amp; function_exists('exec') &amp;&amp; $file['is_file'] &amp;&amp; $file['is_executable'] &amp;&amp; file_exists('/bin/sh')) {
			$actions[] = 'execute';
		}

		if (sizeof($actions) &gt; 0) {

			echo '		&lt;select class=&quot;small&quot; name=&quot;action' . $i . '&quot; size=&quot;1&quot;&gt;
		&lt;option value=&quot;&quot;&gt;' . str_repeat('&amp;nbsp;', 30) . '&lt;/option&gt;
';

			foreach ($actions as $action) {
				echo &quot;\t\t&lt;option value=\&quot;$action\&quot;&gt;&quot; . word($action) . &quot;&lt;/option&gt;\n&quot;;
			}

			echo '		&lt;/select&gt;
		&lt;input class=&quot;small&quot; type=&quot;submit&quot; name=&quot;submit' . $i . '&quot; value=&quot; &amp;gt; &quot; onfocus=&quot;activate(\'other\')&quot; /&gt;
';

		}

		echo '	&lt;/td&gt;
&lt;/tr&gt;
';

	}

	echo '&lt;tr class=&quot;listing_footer&quot;&gt;
	&lt;td style=&quot;text-align: right; vertical-align: top&quot;&gt;&lt;img src=&quot;' . $self . '?image=arrow&quot; alt=&quot;&amp;gt;&quot; /&gt;&lt;/td&gt;
	&lt;td colspan=&quot;' . ($cols - 1) . '&quot;&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;num&quot; value=&quot;' . sizeof($list) . '&quot; /&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;focus&quot; value=&quot;&quot; /&gt;
		&lt;input type=&quot;hidden&quot; name=&quot;olddir&quot; value=&quot;' . html($directory) . '&quot; /&gt;
';

	$actions = array();
	if (@is_writable(dirname($file['path']))) {
		$actions[] = 'delete';
		$actions[] = 'move';
	}
	$actions[] = 'copy';

	echo '		&lt;select class=&quot;small&quot; name=&quot;action_all&quot; size=&quot;1&quot;&gt;
		&lt;option value=&quot;&quot;&gt;' . str_repeat('&amp;nbsp;', 30) . '&lt;/option&gt;
';

	foreach ($actions as $action) {
		echo &quot;\t\t&lt;option value=\&quot;$action\&quot;&gt;&quot; . word($action) . &quot;&lt;/option&gt;\n&quot;;
	}

	echo '		&lt;/select&gt;
		&lt;input class=&quot;small&quot; type=&quot;submit&quot; name=&quot;submit_all&quot; value=&quot; &amp;gt; &quot; onfocus=&quot;activate(\'other\')&quot; /&gt;
	&lt;/td&gt;
&lt;/tr&gt;
';

}

function directory_choice () {
	global $directory, $homedir, $cols, $self;

	echo '&lt;tr&gt;
	&lt;td colspan=&quot;' . $cols . '&quot; id=&quot;directory&quot;&gt;
		&lt;a href=&quot;' . $self . '?dir=' . urlencode($homedir) . '&quot;&gt;' . word('directory') . '&lt;/a&gt;:
		&lt;input type=&quot;text&quot; name=&quot;dir&quot; size=&quot;' . textfieldsize($directory) . '&quot; value=&quot;' . html($directory) . '&quot; onfocus=&quot;activate(\'directory\')&quot; /&gt;
		&lt;input type=&quot;submit&quot; name=&quot;changedir&quot; value=&quot;' . word('change') . '&quot; onfocus=&quot;activate(\'directory\')&quot; /&gt;
	&lt;/td&gt;
&lt;/tr&gt;
';

}

function upload_box () {
	global $cols;

	echo '&lt;tr&gt;
	&lt;td colspan=&quot;' . $cols . '&quot; id=&quot;upload&quot;&gt;
		' . word('file') . ':
		&lt;input type=&quot;file&quot; name=&quot;upload&quot; onfocus=&quot;activate(\'other\')&quot; /&gt;
		&lt;input type=&quot;submit&quot; name=&quot;submit_upload&quot; value=&quot;' . word('upload') . '&quot; onfocus=&quot;activate(\'other\')&quot; /&gt;
	&lt;/td&gt;
&lt;/tr&gt;
';

}

function create_box () {
	global $cols;

	echo '&lt;tr&gt;
	&lt;td colspan=&quot;' . $cols . '&quot; id=&quot;create&quot;&gt;
		&lt;select name=&quot;create_type&quot; size=&quot;1&quot; onfocus=&quot;activate(\'create\')&quot;&gt;
		&lt;option value=&quot;file&quot;&gt;' . word('file') . '&lt;/option&gt;
		&lt;option value=&quot;directory&quot;&gt;' . word('directory') . '&lt;/option&gt;
		&lt;/select&gt;
		&lt;input type=&quot;text&quot; name=&quot;create_name&quot; onfocus=&quot;activate(\'create\')&quot; /&gt;
		&lt;input type=&quot;submit&quot; name=&quot;submit_create&quot; value=&quot;' . word('create') . '&quot; onfocus=&quot;activate(\'create\')&quot; /&gt;
	&lt;/td&gt;
&lt;/tr&gt;
';

}

function edit ($file) {
	global $self, $directory, $editcols, $editrows, $apache, $htpasswd, $htaccess;

	html_header();

	echo '&lt;h2 style=&quot;margin-bottom: 3pt&quot;&gt;' . html($file) . '&lt;/h2&gt;

&lt;form action=&quot;' . $self . '&quot; method=&quot;post&quot;&gt;

&lt;table class=&quot;dialog&quot;&gt;
&lt;tr&gt;
&lt;td class=&quot;dialog&quot;&gt;

	&lt;textarea name=&quot;content&quot; cols=&quot;' . $editcols . '&quot; rows=&quot;' . $editrows . '&quot; WRAP=&quot;off&quot;&gt;';

	if (array_key_exists('content', $_POST)) {
		echo $_POST['content'];
	} else {
		$f = fopen($file, 'r');
		while (!feof($f)) {
			echo html(fread($f, 8192));
		}
		fclose($f);
	}

	if (!empty($_POST['user'])) {
		echo &quot;\n&quot; . $_POST['user'] . ':' . crypt($_POST['password']);
	}
	if (!empty($_POST['basic_auth'])) {
		if ($win) {
			$authfile = str_replace('\\', '/', $directory) . $htpasswd;
		} else {
			$authfile = $directory . $htpasswd;
		}
		echo &quot;\nAuthType Basic\nAuthName &amp;quot;Restricted Directory&amp;quot;\n&quot;;
		echo 'AuthUserFile &amp;quot;' . html($authfile) . &quot;&amp;quot;\n&quot;;
		echo 'Require valid-user';
	}

	echo '&lt;/textarea&gt;

	&lt;hr /&gt;
';

	if ($apache &amp;&amp; basename($file) == $htpasswd) {
		echo '
	' . word('user') . ': &lt;input type=&quot;text&quot; name=&quot;user&quot; /&gt;
	' . word('password') . ': &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;
	&lt;input type=&quot;submit&quot; value=&quot;' . word('add') . '&quot; /&gt;

	&lt;hr /&gt;
';

	}

	if ($apache &amp;&amp; basename($file) == $htaccess) {
		echo '
	&lt;input type=&quot;submit&quot; name=&quot;basic_auth&quot; value=&quot;' . word('add_basic_auth') . '&quot; /&gt;

	&lt;hr /&gt;
';

	}

	echo '
	&lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;edit&quot; /&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;file&quot; value=&quot;' . html($file) . '&quot; /&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;dir&quot; value=&quot;' . html($directory) . '&quot; /&gt;
	&lt;input type=&quot;reset&quot; value=&quot;' . word('reset') . '&quot; id=&quot;red_button&quot; /&gt;
	&lt;input type=&quot;submit&quot; name=&quot;save&quot; value=&quot;' . word('save') . '&quot; id=&quot;green_button&quot; style=&quot;margin-left: 50px&quot; /&gt;

&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;' . $self . '?dir=' . urlencode($directory) . '&quot;&gt;[ ' . word('back') . ' ]&lt;/a&gt;&lt;/p&gt;

&lt;/form&gt;

';

	html_footer();

}

function spacer () {
	global $cols;

	echo '&lt;tr&gt;
	&lt;td colspan=&quot;' . $cols . '&quot; style=&quot;height: 1em&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
';

}

function textfieldsize ($content) {

	$size = strlen($content) + 5;
	if ($size &lt; 30) $size = 30;

	return $size;

}

function request_dump () {

	foreach ($_REQUEST as $key =&gt; $value) {
		echo &quot;\t&lt;input type=\&quot;hidden\&quot; name=\&quot;&quot; . html($key) . '&quot; value=&quot;' . html($value) . &quot;\&quot; /&gt;\n&quot;;
	}

}

/* ------------------------------------------------------------------------- */

function html ($string) {
	global $site_charset;
	return htmlentities($string, ENT_COMPAT, $site_charset);
}

function word ($word) {
	global $words, $word_charset;
	return htmlentities($words[$word], ENT_COMPAT, $word_charset);
}

function phrase ($phrase, $arguments) {
	global $words;
	static $search;

	if (!is_array($search)) for ($i = 1; $i &lt;= 8; $i++) $search[] = &quot;%$i&quot;;

	for ($i = 0; $i &lt; sizeof($arguments); $i++) {
		$arguments[$i] = nl2br(html($arguments[$i]));
	}

	$replace = array('{' =&gt; '&lt;pre&gt;', '}' =&gt;'&lt;/pre&gt;', '[' =&gt; '&lt;b&gt;', ']' =&gt; '&lt;/b&gt;');

	return str_replace($search, $arguments, str_replace(array_keys($replace), $replace, nl2br(html($words[$phrase]))));

}

function getwords ($lang) {
	global $word_charset, $date_format;

	switch ($lang) {

	case 'sp':

		$date_format = 'j/n/y H:i:s';
		$word_charset = 'ISO-8859-1';

		return array(
'directory' =&gt; 'Directorio',
'file' =&gt; 'Archivo',
'filename' =&gt; 'Nombre Archivo',

'size' =&gt; 'Tamaño',
'permission' =&gt; 'Permisos',
'owner' =&gt; 'Propietario',
'group' =&gt; 'Grupo',
'other' =&gt; 'Otros',
'functions' =&gt; 'Funciones',

'read' =&gt; 'lectura',
'write' =&gt; 'escritura',
'execute' =&gt; 'ejecución',

'create_symlink' =&gt; 'crear enlace',
'delete' =&gt; 'borrar',
'rename' =&gt; 'renombrar',
'move' =&gt; 'mover',
'copy' =&gt; 'copiar',
'edit' =&gt; 'editar',
'download' =&gt; 'bajar',
'upload' =&gt; 'subir',
'create' =&gt; 'crear',
'change' =&gt; 'cambiar',
'save' =&gt; 'salvar',
'set' =&gt; 'setear',
'reset' =&gt; 'resetear',
'relative' =&gt; 'Path relativo',

'yes' =&gt; 'Si',
'no' =&gt; 'No',
'back' =&gt; 'atrás',
'destination' =&gt; 'Destino',
'symlink' =&gt; 'Enlace',
'no_output' =&gt; 'sin salida',

'user' =&gt; 'Usuario',
'password' =&gt; 'Clave',
'add' =&gt; 'agregar',
'add_basic_auth' =&gt; 'agregar autentificación básica',

'uploaded' =&gt; '&quot;[%1]&quot; ha sido subido.',
'not_uploaded' =&gt; '&quot;[%1]&quot; no pudo ser subido.',
'already_exists' =&gt; '&quot;[%1]&quot; ya existe.',
'created' =&gt; '&quot;[%1]&quot; ha sido creado.',
'not_created' =&gt; '&quot;[%1]&quot; no pudo ser creado.',
'really_delete' =&gt; '¿Borra estos archivos?',
'deleted' =&gt; &quot;Estos archivos han sido borrados:\n[%1]&quot;,
'not_deleted' =&gt; &quot;Estos archivos no pudieron ser borrados:\n[%1]&quot;,
'rename_file' =&gt; 'Renombra archivo:',
'renamed' =&gt; '&quot;[%1]&quot; ha sido renombrado a &quot;[%2]&quot;.',
'not_renamed' =&gt; '&quot;[%1] no pudo ser renombrado a &quot;[%2]&quot;.',
'move_files' =&gt; 'Mover estos archivos:',
'moved' =&gt; &quot;Estos archivos han sido movidos a \&quot;[%2]\&quot;:\n[%1]&quot;,
'not_moved' =&gt; &quot;Estos archivos no pudieron ser movidos a \&quot;[%2]\&quot;:\n[%1]&quot;,
'copy_files' =&gt; 'Copiar estos archivos:',
'copied' =&gt; &quot;Estos archivos han sido copiados a  \&quot;[%2]\&quot;:\n[%1]&quot;,
'not_copied' =&gt; &quot;Estos archivos no pudieron ser copiados \&quot;[%2]\&quot;:\n[%1]&quot;,
'not_edited' =&gt; '&quot;[%1]&quot; no pudo ser editado.',
'executed' =&gt; &quot;\&quot;[%1]\&quot; ha sido ejecutado correctamente:\n{%2}&quot;,
'not_executed' =&gt; &quot;\&quot;[%1]\&quot; no pudo ser ejecutado correctamente:\n{%2}&quot;,
'saved' =&gt; '&quot;[%1]&quot; ha sido salvado.',
'not_saved' =&gt; '&quot;[%1]&quot; no pudo ser salvado.',
'symlinked' =&gt; 'Enlace desde &quot;[%2]&quot; a &quot;[%1]&quot; ha sido creado.',
'not_symlinked' =&gt; 'Enlace desde &quot;[%2]&quot; a &quot;[%1]&quot; no pudo ser creado.',
'permission_for' =&gt; 'Permisos de &quot;[%1]&quot;:',
'permission_set' =&gt; 'Permisos de &quot;[%1]&quot; fueron seteados a [%2].',
'permission_not_set' =&gt; 'Permisos de &quot;[%1]&quot; no pudo ser seteado a [%2].',
'not_readable' =&gt; '&quot;[%1]&quot; no pudo ser leído.'
		);
	case 'en':
	default:

		$date_format = 'n/j/y H:i:s';
		$word_charset = 'ISO-8859-1';

		return array(
'directory' =&gt; 'Directory',
'file' =&gt; 'File',
'filename' =&gt; 'Filename',

'size' =&gt; 'Size',
'permission' =&gt; 'Permission',
'owner' =&gt; 'Owner',
'group' =&gt; 'Group',
'other' =&gt; 'Others',
'functions' =&gt; 'Functions',

'read' =&gt; 'read',
'write' =&gt; 'write',
'execute' =&gt; 'execute',

'create_symlink' =&gt; 'create symlink',
'delete' =&gt; 'delete',
'rename' =&gt; 'rename',
'move' =&gt; 'move',
'copy' =&gt; 'copy',
'edit' =&gt; 'edit',
'download' =&gt; 'download',
'upload' =&gt; 'upload',
'create' =&gt; 'create',
'change' =&gt; 'change',
'save' =&gt; 'save',
'set' =&gt; 'set',
'reset' =&gt; 'reset',
'relative' =&gt; 'Relative path to target',

'yes' =&gt; 'Yes',
'no' =&gt; 'No',
'back' =&gt; 'back',
'destination' =&gt; 'Destination',
'symlink' =&gt; 'Symlink',
'no_output' =&gt; 'no output',

'user' =&gt; 'User',
'password' =&gt; 'Password',
'add' =&gt; 'add',
'add_basic_auth' =&gt; 'add basic-authentification',

'uploaded' =&gt; '&quot;[%1]&quot; has been uploaded.',
'not_uploaded' =&gt; '&quot;[%1]&quot; could not be uploaded.',
'already_exists' =&gt; '&quot;[%1]&quot; already exists.',
'created' =&gt; '&quot;[%1]&quot; has been created.',
'not_created' =&gt; '&quot;[%1]&quot; could not be created.',
'really_delete' =&gt; 'Delete these files?',
'deleted' =&gt; &quot;These files have been deleted:\n[%1]&quot;,
'not_deleted' =&gt; &quot;These files could not be deleted:\n[%1]&quot;,
'rename_file' =&gt; 'Rename file:',
'renamed' =&gt; '&quot;[%1]&quot; has been renamed to &quot;[%2]&quot;.',
'not_renamed' =&gt; '&quot;[%1] could not be renamed to &quot;[%2]&quot;.',
'move_files' =&gt; 'Move these files:',
'moved' =&gt; &quot;These files have been moved to \&quot;[%2]\&quot;:\n[%1]&quot;,
'not_moved' =&gt; &quot;These files could not be moved to \&quot;[%2]\&quot;:\n[%1]&quot;,
'copy_files' =&gt; 'Copy these files:',
'copied' =&gt; &quot;These files have been copied to \&quot;[%2]\&quot;:\n[%1]&quot;,
'not_copied' =&gt; &quot;These files could not be copied to \&quot;[%2]\&quot;:\n[%1]&quot;,
'not_edited' =&gt; '&quot;[%1]&quot; can not be edited.',
'executed' =&gt; &quot;\&quot;[%1]\&quot; has been executed successfully:\n{%2}&quot;,
'not_executed' =&gt; &quot;\&quot;[%1]\&quot; could not be executed successfully:\n{%2}&quot;,
'saved' =&gt; '&quot;[%1]&quot; has been saved.',
'not_saved' =&gt; '&quot;[%1]&quot; could not be saved.',
'symlinked' =&gt; 'Symlink from &quot;[%2]&quot; to &quot;[%1]&quot; has been created.',
'not_symlinked' =&gt; 'Symlink from &quot;[%2]&quot; to &quot;[%1]&quot; could not be created.',
'permission_for' =&gt; 'Permission of &quot;[%1]&quot;:',
'permission_set' =&gt; 'Permission of &quot;[%1]&quot; was set to [%2].',
'permission_not_set' =&gt; 'Permission of &quot;[%1]&quot; could not be set to [%2].',
'not_readable' =&gt; '&quot;[%1]&quot; can not be read.'
		);

	}

}

function getimage ($image) {
	switch ($image) {
	case 'file':
		return base64_decode('R0lGODlhEQANAJEDAJmZmf///wAAAP///yH5BAHoAwMALAAAAAARAA0AAAItnIGJxg0B42rsiSvCA/REmXQWhmnih3LUSGaqg35vFbSXucbSabunjnMohq8CADsA');
	case 'folder':
		return base64_decode('R0lGODlhEQANAJEDAJmZmf///8zMzP///yH5BAHoAwMALAAAAAARAA0AAAIqnI+ZwKwbYgTPtIudlbwLOgCBQJYmCYrn+m3smY5vGc+0a7dhjh7ZbygAADsA');
	case 'hidden_file':
		return base64_decode('R0lGODlhEQANAJEDAMwAAP///5mZmf///yH5BAHoAwMALAAAAAARAA0AAAItnIGJxg0B42rsiSvCA/REmXQWhmnih3LUSGaqg35vFbSXucbSabunjnMohq8CADsA');
	case 'link':
		return base64_decode('R0lGODlhEQANAKIEAJmZmf///wAAAMwAAP///wAAAAAAAAAAACH5BAHoAwQALAAAAAARAA0AAAM5SArcrDCCQOuLcIotwgTYUllNOA0DxXkmhY4shM5zsMUKTY8gNgUvW6cnAaZgxMyIM2zBLCaHlJgAADsA');
	case 'smiley':
		return base64_decode('R0lGODlhEQANAJECAAAAAP//AP///wAAACH5BAHoAwIALAAAAAARAA0AAAIslI+pAu2wDAiz0jWD3hqmBzZf1VCleJQch0rkdnppB3dKZuIygrMRE/oJDwUAOwA=');
	case 'arrow':
		return base64_decode('R0lGODlhEQANAIABAAAAAP///yH5BAEKAAEALAAAAAARAA0AAAIdjA9wy6gNQ4pwUmav0yvn+hhJiI3mCJ6otrIkxxQAOw==');
	}
}

function html_header () {
	global $site_charset;

	echo &lt;&lt;&lt;END
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
     &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;

&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=$site_charset&quot; /&gt;

&lt;title&gt;webadmin.php&lt;/title&gt;

&lt;style type=&quot;text/css&quot;&gt;
body { font: small sans-serif; text-align: center }
img { width: 17px; height: 13px }
a, a:visited { text-decoration: none; color: navy }
hr { border-style: none; height: 1px; background-color: silver; color: silver }
#main { margin-top: 6pt; margin-left: auto; margin-right: auto; border-spacing: 1px }
#main th { background: #eee; padding: 3pt 3pt 0pt 3pt }
.listing th, .listing td { padding: 1px 3pt 0 3pt }
.listing th { border: 1px solid silver }
.listing td { border: 1px solid #ddd; background: white }
.listing .checkbox { text-align: center }
.listing .filename { text-align: left }
.listing .size { text-align: right }
.listing .permission_header { text-align: left }
.listing .permission { font-family: monospace }
.listing .owner { text-align: left }
.listing .group { text-align: left }
.listing .functions { text-align: left }
.listing_footer td { background: #eee; border: 1px solid silver }
#directory, #upload, #create, .listing_footer td, #error td, #notice td { text-align: left; padding: 3pt }
#directory { background: #eee; border: 1px solid silver }
#upload { padding-top: 1em }
#create { padding-bottom: 1em }
.small, .small option { font-size: x-small }
textarea { border: none; background: white }
table.dialog { margin-left: auto; margin-right: auto }
td.dialog { background: #eee; padding: 1ex; border: 1px solid silver; text-align: center }
#permission { margin-left: auto; margin-right: auto }
#permission td { padding-left: 3pt; padding-right: 3pt; text-align: center }
td.permission_action { text-align: right }
#symlink { background: #eee; border: 1px solid silver }
#symlink td { text-align: left; padding: 3pt }
#red_button { width: 120px; color: #400 }
#green_button { width: 120px; color: #040 }
#error td { background: maroon; color: white; border: 1px solid silver }
#notice td { background: green; color: white; border: 1px solid silver }
#notice pre, #error pre { background: silver; color: black; padding: 1ex; margin-left: 1ex; margin-right: 1ex }
code { font-size: 12pt }
td { white-space: nowrap }
&lt;/style&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!--
function activate (name) {
	if (document &amp;&amp; document.forms[0] &amp;&amp; document.forms[0].elements['focus']) {
		document.forms[0].elements['focus'].value = name;
	}
}
//--&gt;
&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;


END;

}

function html_footer () {

	echo &lt;&lt;&lt;END
&lt;/body&gt;
&lt;/html&gt;
END;

}

function notice ($phrase) {
	global $cols;

	$args = func_get_args();
	array_shift($args);

	return '&lt;tr id=&quot;notice&quot;&gt;
	&lt;td colspan=&quot;' . $cols . '&quot;&gt;' . phrase($phrase, $args) . '&lt;/td&gt;
&lt;/tr&gt;
';

}

function error ($phrase) {
	global $cols;

	$args = func_get_args();
	array_shift($args);

	return '&lt;tr id=&quot;error&quot;&gt;
	&lt;td colspan=&quot;' . $cols . '&quot;&gt;' . phrase($phrase, $args) . '&lt;/td&gt;
&lt;/tr&gt;
';

}

?&gt;